#*********************************************************************
#   INCLUDES
#*********************************************************************

#*********************************************************************
#   GLOBAL CONSTANTS
#*********************************************************************

#*********************************************************************
#   LOCAL CONSTANTS
#*********************************************************************

local INC_DIR = ./include ;

#*********************************************************************
#   PROJECT
#*********************************************************************
project KRNL : requirements <include>$(INC_DIR) ;

#*********************************************************************
#   TARGETS
#*********************************************************************

exe kernel_bin
    :
    # Sources
    arch/i386/boot.S
    arch/i386/crti.S
    arch/i386/crtn.S
    arch/i386/tty.c

    kernel/kernel.c

    # /LIBC//k # This should probably be referenced with the <library> feature.
    :
    # Requirements
    <architecture>x86:<linkflags>"-T $(TOP)/src/kernel/arch/i386/linker.ld"
    <define>__is_kernel
    <library>k  # libk
    <dependency>/LIBC//install # Required for access to headers since we use angled includes.
    ;
explicit kernel_bin ;

#-----------------------------------------------------------
# Use this target when you want to link to libk using the 
# -l linker flag.  
#-----------------------------------------------------------
lib k ;
explicit k ;

make myos.iso : kernel_bin : @makeiso ;
actions makeiso
{

}
explicit myos.iso ;


install install_headers
    :
    [ glob-tree *.h : vga.h ]
    :
    <location>$(ABS_SYS_INC_DIR)
    <install-source-root>$(INC_DIR)
    ;
explicit install_headers ;

install install_kernel
    :
    kernel_bin
    :
    <location>$(ABS_SYS_BOOT_DIR)
    ;
explicit install_kernel ;

alias install 
    :
    install_headers
    install_kernel
    ;
explicit install ;